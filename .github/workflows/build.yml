name: Build

on: [push, workflow_dispatch]

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PROJECT_RELEASE_NAME: FEZ Keyboard Translator
  PROJECT_RELEASE_PATH_LINUX: ${{ github.event.repository.name }}-linux-x64
  PROJECT_RELEASE_PATH_WEB: ${{ github.event.repository.name }}-web
  PROJECT_RELEASE_PATH_WINDOWS: ${{ github.event.repository.name }}-windows-x64

jobs:
  build-linux:
    runs-on: ubuntu-latest

    env:
      PROJECT_BUILD_PATH: build

    steps:
      - name: Set env variables
        run: |
          echo "PROJECT_INSTALL_PATH=${{ env.PROJECT_RELEASE_PATH_LINUX }}" >> $GITHUB_ENV
        shell: bash

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Prepare Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev
          mkdir -p ${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Configure
        run: |
          cmake -B ${{ env.PROJECT_BUILD_PATH }} -DCMAKE_BUILD_TYPE=Release
        shell: bash

      - name: Build
        run: |
          cmake --build ${{ env.PROJECT_BUILD_PATH }}
        shell: bash

      - name: Generate Artifacts
        run: |
          ls -l ${{ env.PROJECT_BUILD_PATH }}/src
          cp ${{ env.PROJECT_BUILD_PATH }}/src/${{ env.PROJECT_NAME }} ${{ env.PROJECT_INSTALL_PATH }}/
          ls -l ${{ env.PROJECT_INSTALL_PATH }}
          7z a ./${{ env.PROJECT_INSTALL_PATH }}.zip ./${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_INSTALL_PATH }}.zip
          path: ./${{ env.PROJECT_INSTALL_PATH }}.zip

  build-web:
    runs-on: ubuntu-latest

    env:
      PROJECT_BUILD_PATH: build-web

    permissions:
      contents: write

    steps:
      - name: Set env variables
        run: |
          echo "PROJECT_INSTALL_PATH=${{ env.PROJECT_RELEASE_PATH_WEB }}" >> $GITHUB_ENV
        shell: bash

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.48
          actions-cache-folder: 'emsdk-cache'

      - name: Prepare Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev
          mkdir -p ${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Configure
        run: |
          emcmake cmake -S . -B ${{ env.PROJECT_BUILD_PATH }} -DPLATFORM=Web -DCMAKE_BUILD_TYPE=Release
        shell: bash

      - name: Build
        run: |
          cmake --build ${{ env.PROJECT_BUILD_PATH }}
        shell: bash

      - name: Generate Artifacts
        run: |
          ls -l ${{ env.PROJECT_BUILD_PATH }}/src
          cp ${{ env.PROJECT_BUILD_PATH }}/src/${{ env.PROJECT_NAME }}.html ${{ env.PROJECT_INSTALL_PATH }}/index.html
          cp ${{ env.PROJECT_BUILD_PATH }}/src/${{ env.PROJECT_NAME }}.js ${{ env.PROJECT_INSTALL_PATH }}/
          cp ${{ env.PROJECT_BUILD_PATH }}/src/${{ env.PROJECT_NAME }}.wasm ${{ env.PROJECT_INSTALL_PATH }}/
          ls -l ${{ env.PROJECT_INSTALL_PATH }}
          7z a ./${{ env.PROJECT_INSTALL_PATH }}.zip ./${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_INSTALL_PATH }}.zip
          path: ./${{ env.PROJECT_INSTALL_PATH }}.zip

  build-windows:
    runs-on: windows-latest

    env:
      PROJECT_BUILD_PATH: build-win

    steps:
      - name: Set env variables
        run: |
          echo "PROJECT_INSTALL_PATH=${{ env.PROJECT_RELEASE_PATH_WINDOWS }}" >> $GITHUB_ENV
        shell: bash

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Prepare Environment
        run: |
          mkdir -p ${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Configure
        run: |
          cmake -B ${{ env.PROJECT_BUILD_PATH }}
        shell: bash

      - name: Build
        run: |
          cmake --build ${{ env.PROJECT_BUILD_PATH }} --target ${{ env.PROJECT_NAME }} --config Release
        shell: bash

      - name: Generate Artifacts
        run: |
          ls -l ${{ env.PROJECT_BUILD_PATH }}/src
          cp ${{ env.PROJECT_BUILD_PATH }}/src/Release/${{ env.PROJECT_NAME }}.exe ${{ env.PROJECT_INSTALL_PATH }}/
          ls -l ${{ env.PROJECT_INSTALL_PATH }}
          7z a ./${{ env.PROJECT_INSTALL_PATH }}.zip ./${{ env.PROJECT_INSTALL_PATH }}
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_INSTALL_PATH }}.zip
          path: ./${{ env.PROJECT_INSTALL_PATH }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    permissions:
      contents: write

    needs: [build-linux, build-web, build-windows]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Linux package
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_RELEASE_PATH_LINUX }}.zip

      - name: Download Web package
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_RELEASE_PATH_WEB }}.zip

      - name: Download Windows package
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PROJECT_RELEASE_PATH_WINDOWS }}.zip

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.PROJECT_RELEASE_NAME }} ${{ github.ref_name }}
          files: |
            ${{ env.PROJECT_RELEASE_PATH_LINUX }}.zip
            ${{ env.PROJECT_RELEASE_PATH_WEB }}.zip
            ${{ env.PROJECT_RELEASE_PATH_WINDOWS }}.zip
          generate_release_notes: true
